/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.cassandra.service;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

public class CqlResult_t implements TBase, java.io.Serializable {
  public int errorCode;
  public String errorTxt;
  public List<Map<String,String>> resultSet;

  public final Isset __isset = new Isset();
  public static final class Isset implements java.io.Serializable {
    public boolean errorCode = false;
    public boolean errorTxt = false;
    public boolean resultSet = false;
  }

  public CqlResult_t() {
  }

  public CqlResult_t(
    int errorCode,
    String errorTxt,
    List<Map<String,String>> resultSet)
  {
    this();
    this.errorCode = errorCode;
    this.__isset.errorCode = true;
    this.errorTxt = errorTxt;
    this.__isset.errorTxt = true;
    this.resultSet = resultSet;
    this.__isset.resultSet = true;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CqlResult_t)
      return this.equals((CqlResult_t)that);
    return false;
  }

  public boolean equals(CqlResult_t that) {
    if (that == null)
      return false;

    boolean this_present_errorCode = true;
    boolean that_present_errorCode = true;
    if (this_present_errorCode || that_present_errorCode) {
      if (!(this_present_errorCode && that_present_errorCode))
        return false;
      if (this.errorCode != that.errorCode)
        return false;
    }

    boolean this_present_errorTxt = true && (this.errorTxt != null);
    boolean that_present_errorTxt = true && (that.errorTxt != null);
    if (this_present_errorTxt || that_present_errorTxt) {
      if (!(this_present_errorTxt && that_present_errorTxt))
        return false;
      if (!this.errorTxt.equals(that.errorTxt))
        return false;
    }

    boolean this_present_resultSet = true && (this.resultSet != null);
    boolean that_present_resultSet = true && (that.resultSet != null);
    if (this_present_resultSet || that_present_resultSet) {
      if (!(this_present_resultSet && that_present_resultSet))
        return false;
      if (!this.resultSet.equals(that.resultSet))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case 1:
          if (field.type == TType.I32) {
            this.errorCode = iprot.readI32();
            this.__isset.errorCode = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2:
          if (field.type == TType.STRING) {
            this.errorTxt = iprot.readString();
            this.__isset.errorTxt = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3:
          if (field.type == TType.LIST) {
            {
              TList _list40 = iprot.readListBegin();
              this.resultSet = new ArrayList<Map<String,String>>(_list40.size);
              for (int _i41 = 0; _i41 < _list40.size; ++_i41)
              {
                Map<String,String> _elem42 = new HashMap<String,String>();
                {
                  TMap _map43 = iprot.readMapBegin();
                  _elem42 = new HashMap<String,String>(2*_map43.size);
                  for (int _i44 = 0; _i44 < _map43.size; ++_i44)
                  {
                    String _key45;
                    String _val46;
                    _key45 = iprot.readString();
                    _val46 = iprot.readString();
                    _elem42.put(_key45, _val46);
                  }
                  iprot.readMapEnd();
                }
                this.resultSet.add(_elem42);
              }
              iprot.readListEnd();
            }
            this.__isset.resultSet = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
  }

  public void write(TProtocol oprot) throws TException {
    TStruct struct = new TStruct("CqlResult_t");
    oprot.writeStructBegin(struct);
    TField field = new TField();
    field.name = "errorCode";
    field.type = TType.I32;
    field.id = 1;
    oprot.writeFieldBegin(field);
    oprot.writeI32(this.errorCode);
    oprot.writeFieldEnd();
    if (this.errorTxt != null) {
      field.name = "errorTxt";
      field.type = TType.STRING;
      field.id = 2;
      oprot.writeFieldBegin(field);
      oprot.writeString(this.errorTxt);
      oprot.writeFieldEnd();
    }
    if (this.resultSet != null) {
      field.name = "resultSet";
      field.type = TType.LIST;
      field.id = 3;
      oprot.writeFieldBegin(field);
      {
        oprot.writeListBegin(new TList(TType.MAP, this.resultSet.size()));
        for (Map<String,String> _iter47 : this.resultSet)        {
          {
            oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _iter47.size()));
            for (String _iter48 : _iter47.keySet())            {
              oprot.writeString(_iter48);
              oprot.writeString(_iter47.get(_iter48));
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("CqlResult_t(");
    sb.append("errorCode:");
    sb.append(this.errorCode);
    sb.append(",errorTxt:");
    sb.append(this.errorTxt);
    sb.append(",resultSet:");
    sb.append(this.resultSet);
    sb.append(")");
    return sb.toString();
  }

}

