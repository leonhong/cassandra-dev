/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.cassandra.service;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

public class batch_mutation_super_t implements TBase, java.io.Serializable {
  public String table;
  public String key;
  public Map<String,List<superColumn_t>> cfmap;
  public Map<String,List<superColumn_t>> cfmapdel;

  public final Isset __isset = new Isset();
  public static final class Isset implements java.io.Serializable {
    public boolean table = false;
    public boolean key = false;
    public boolean cfmap = false;
    public boolean cfmapdel = false;
  }

  public batch_mutation_super_t() {
  }

  public batch_mutation_super_t(
    String table,
    String key,
    Map<String,List<superColumn_t>> cfmap,
    Map<String,List<superColumn_t>> cfmapdel)
  {
    this();
    this.table = table;
    this.__isset.table = true;
    this.key = key;
    this.__isset.key = true;
    this.cfmap = cfmap;
    this.__isset.cfmap = true;
    this.cfmapdel = cfmapdel;
    this.__isset.cfmapdel = true;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof batch_mutation_super_t)
      return this.equals((batch_mutation_super_t)that);
    return false;
  }

  public boolean equals(batch_mutation_super_t that) {
    if (that == null)
      return false;

    boolean this_present_table = true && (this.table != null);
    boolean that_present_table = true && (that.table != null);
    if (this_present_table || that_present_table) {
      if (!(this_present_table && that_present_table))
        return false;
      if (!this.table.equals(that.table))
        return false;
    }

    boolean this_present_key = true && (this.key != null);
    boolean that_present_key = true && (that.key != null);
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (!this.key.equals(that.key))
        return false;
    }

    boolean this_present_cfmap = true && (this.cfmap != null);
    boolean that_present_cfmap = true && (that.cfmap != null);
    if (this_present_cfmap || that_present_cfmap) {
      if (!(this_present_cfmap && that_present_cfmap))
        return false;
      if (!this.cfmap.equals(that.cfmap))
        return false;
    }

    boolean this_present_cfmapdel = true && (this.cfmapdel != null);
    boolean that_present_cfmapdel = true && (that.cfmapdel != null);
    if (this_present_cfmapdel || that_present_cfmapdel) {
      if (!(this_present_cfmapdel && that_present_cfmapdel))
        return false;
      if (!this.cfmapdel.equals(that.cfmapdel))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case 1:
          if (field.type == TType.STRING) {
            this.table = iprot.readString();
            this.__isset.table = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2:
          if (field.type == TType.STRING) {
            this.key = iprot.readString();
            this.__isset.key = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3:
          if (field.type == TType.MAP) {
            {
              TMap _map22 = iprot.readMapBegin();
              this.cfmap = new HashMap<String,List<superColumn_t>>(2*_map22.size);
              for (int _i23 = 0; _i23 < _map22.size; ++_i23)
              {
                String _key24;
                List<superColumn_t> _val25;
                _key24 = iprot.readString();
                {
                  TList _list26 = iprot.readListBegin();
                  _val25 = new ArrayList<superColumn_t>(_list26.size);
                  for (int _i27 = 0; _i27 < _list26.size; ++_i27)
                  {
                    superColumn_t _elem28 = new superColumn_t();
                    _elem28 = new superColumn_t();
                    _elem28.read(iprot);
                    _val25.add(_elem28);
                  }
                  iprot.readListEnd();
                }
                this.cfmap.put(_key24, _val25);
              }
              iprot.readMapEnd();
            }
            this.__isset.cfmap = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4:
          if (field.type == TType.MAP) {
            {
              TMap _map29 = iprot.readMapBegin();
              this.cfmapdel = new HashMap<String,List<superColumn_t>>(2*_map29.size);
              for (int _i30 = 0; _i30 < _map29.size; ++_i30)
              {
                String _key31;
                List<superColumn_t> _val32;
                _key31 = iprot.readString();
                {
                  TList _list33 = iprot.readListBegin();
                  _val32 = new ArrayList<superColumn_t>(_list33.size);
                  for (int _i34 = 0; _i34 < _list33.size; ++_i34)
                  {
                    superColumn_t _elem35 = new superColumn_t();
                    _elem35 = new superColumn_t();
                    _elem35.read(iprot);
                    _val32.add(_elem35);
                  }
                  iprot.readListEnd();
                }
                this.cfmapdel.put(_key31, _val32);
              }
              iprot.readMapEnd();
            }
            this.__isset.cfmapdel = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
  }

  public void write(TProtocol oprot) throws TException {
    TStruct struct = new TStruct("batch_mutation_super_t");
    oprot.writeStructBegin(struct);
    TField field = new TField();
    if (this.table != null) {
      field.name = "table";
      field.type = TType.STRING;
      field.id = 1;
      oprot.writeFieldBegin(field);
      oprot.writeString(this.table);
      oprot.writeFieldEnd();
    }
    if (this.key != null) {
      field.name = "key";
      field.type = TType.STRING;
      field.id = 2;
      oprot.writeFieldBegin(field);
      oprot.writeString(this.key);
      oprot.writeFieldEnd();
    }
    if (this.cfmap != null) {
      field.name = "cfmap";
      field.type = TType.MAP;
      field.id = 3;
      oprot.writeFieldBegin(field);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, this.cfmap.size()));
        for (String _iter36 : this.cfmap.keySet())        {
          oprot.writeString(_iter36);
          {
            oprot.writeListBegin(new TList(TType.STRUCT, this.cfmap.get(_iter36).size()));
            for (superColumn_t _iter37 : this.cfmap.get(_iter36))            {
              _iter37.write(oprot);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.cfmapdel != null) {
      field.name = "cfmapdel";
      field.type = TType.MAP;
      field.id = 4;
      oprot.writeFieldBegin(field);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, this.cfmapdel.size()));
        for (String _iter38 : this.cfmapdel.keySet())        {
          oprot.writeString(_iter38);
          {
            oprot.writeListBegin(new TList(TType.STRUCT, this.cfmapdel.get(_iter38).size()));
            for (superColumn_t _iter39 : this.cfmapdel.get(_iter38))            {
              _iter39.write(oprot);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("batch_mutation_super_t(");
    sb.append("table:");
    sb.append(this.table);
    sb.append(",key:");
    sb.append(this.key);
    sb.append(",cfmap:");
    sb.append(this.cfmap);
    sb.append(",cfmapdel:");
    sb.append(this.cfmapdel);
    sb.append(")");
    return sb.toString();
  }

}

