/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.facebook.infrastructure.service;

import java.util.ArrayList;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

public class msg_thread_data implements TBase, java.io.Serializable {
  public String threadId;
  public String synopsis;
  public String subject;
  public ArrayList<String> author_list;
  public String participants_ids;

  public final Isset __isset = new Isset();
  public static final class Isset {
    public boolean threadId = false;
    public boolean synopsis = false;
    public boolean subject = false;
    public boolean author_list = false;
    public boolean participants_ids = false;
  }

  public msg_thread_data() {
  }

  public msg_thread_data(
    String threadId,
    String synopsis,
    String subject,
    ArrayList<String> author_list,
    String participants_ids)
  {
    this();
    this.threadId = threadId;
    this.__isset.threadId = true;
    this.synopsis = synopsis;
    this.__isset.synopsis = true;
    this.subject = subject;
    this.__isset.subject = true;
    this.author_list = author_list;
    this.__isset.author_list = true;
    this.participants_ids = participants_ids;
    this.__isset.participants_ids = true;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case 1:
          if (field.type == TType.STRING) {
            this.threadId = iprot.readString();
            this.__isset.threadId = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2:
          if (field.type == TType.STRING) {
            this.synopsis = iprot.readString();
            this.__isset.synopsis = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3:
          if (field.type == TType.STRING) {
            this.subject = iprot.readString();
            this.__isset.subject = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4:
          if (field.type == TType.LIST) {
            {
              TList _list22 = iprot.readListBegin();
              this.author_list = new ArrayList<String>(_list22.size);
              for (int _i23 = 0; _i23 < _list22.size; ++_i23)
              {
                String _elem24 = null;
                _elem24 = iprot.readString();
                this.author_list.add(_elem24);
              }
              iprot.readListEnd();
            }
            this.__isset.author_list = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5:
          if (field.type == TType.STRING) {
            this.participants_ids = iprot.readString();
            this.__isset.participants_ids = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
  }

  public void write(TProtocol oprot) throws TException {
    TStruct struct = new TStruct("msg_thread_data");
    oprot.writeStructBegin(struct);
    TField field = new TField();
    if (this.threadId != null) {
      field.name = "threadId";
      field.type = TType.STRING;
      field.id = 1;
      oprot.writeFieldBegin(field);
      oprot.writeString(this.threadId);
      oprot.writeFieldEnd();
    }
    if (this.synopsis != null) {
      field.name = "synopsis";
      field.type = TType.STRING;
      field.id = 2;
      oprot.writeFieldBegin(field);
      oprot.writeString(this.synopsis);
      oprot.writeFieldEnd();
    }
    if (this.subject != null) {
      field.name = "subject";
      field.type = TType.STRING;
      field.id = 3;
      oprot.writeFieldBegin(field);
      oprot.writeString(this.subject);
      oprot.writeFieldEnd();
    }
    if (this.author_list != null) {
      field.name = "author_list";
      field.type = TType.LIST;
      field.id = 4;
      oprot.writeFieldBegin(field);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.author_list.size()));
        for (String _iter25 : this.author_list)        {
          oprot.writeString(_iter25);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.participants_ids != null) {
      field.name = "participants_ids";
      field.type = TType.STRING;
      field.id = 5;
      oprot.writeFieldBegin(field);
      oprot.writeString(this.participants_ids);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("msg_thread_data(");
    sb.append("threadId:");
    sb.append(this.threadId);
    sb.append(",synopsis:");
    sb.append(this.synopsis);
    sb.append(",subject:");
    sb.append(this.subject);
    sb.append(",author_list:");
    sb.append(this.author_list);
    sb.append(",participants_ids:");
    sb.append(this.participants_ids);
    sb.append(")");
    return sb.toString();
  }

}

