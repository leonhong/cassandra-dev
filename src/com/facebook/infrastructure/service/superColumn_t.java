/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.facebook.infrastructure.service;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

public class superColumn_t implements TBase, java.io.Serializable {
  public String name;
  public List<column_t> columns;

  public final Isset __isset = new Isset();
  public static final class Isset implements java.io.Serializable {
    public boolean name = false;
    public boolean columns = false;
  }

  public superColumn_t() {
  }

  public superColumn_t(
    String name,
    List<column_t> columns)
  {
    this();
    this.name = name;
    this.__isset.name = true;
    this.columns = columns;
    this.__isset.columns = true;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof superColumn_t)
      return this.equals((superColumn_t)that);
    return false;
  }

  public boolean equals(superColumn_t that) {
    if (that == null)
      return false;

    boolean this_present_name = true && (this.name != null);
    boolean that_present_name = true && (that.name != null);
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_columns = true && (this.columns != null);
    boolean that_present_columns = true && (that.columns != null);
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case 1:
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
            this.__isset.name = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2:
          if (field.type == TType.LIST) {
            {
              TList _list9 = iprot.readListBegin();
              this.columns = new ArrayList<column_t>(_list9.size);
              for (int _i10 = 0; _i10 < _list9.size; ++_i10)
              {
                column_t _elem11 = new column_t();
                _elem11 = new column_t();
                _elem11.read(iprot);
                this.columns.add(_elem11);
              }
              iprot.readListEnd();
            }
            this.__isset.columns = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
  }

  public void write(TProtocol oprot) throws TException {
    TStruct struct = new TStruct("superColumn_t");
    oprot.writeStructBegin(struct);
    TField field = new TField();
    if (this.name != null) {
      field.name = "name";
      field.type = TType.STRING;
      field.id = 1;
      oprot.writeFieldBegin(field);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.columns != null) {
      field.name = "columns";
      field.type = TType.LIST;
      field.id = 2;
      oprot.writeFieldBegin(field);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.columns.size()));
        for (column_t _iter12 : this.columns)        {
          _iter12.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuilder sb = new StringBuilder("superColumn_t(");
    sb.append("name:");
    sb.append(this.name);
    sb.append(",columns:");
    sb.append(this.columns);
    sb.append(")");
    return sb.toString();
  }

}

